datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

///////////////////////////
// Api Tokens Management //
///////////////////////////

model ApiToken {
  id          String @id @default(uuid())
  name        String @unique
  description String

  token String @unique

  type   ApiTokenType
  status ApiTokenStatus @default(ENABLED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApiTokenType {
  ANON
  SERVICE
}

enum ApiTokenStatus {
  ENABLED
  DISABLED
}

//////////////////////
// Users Management //
//////////////////////

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  name     String
  password String

  status UserStatus @default(ENABLED)
  roles  UserRole[] @default([APP_USER])

  groups UserGroup[]

  ticketsSent     Ticket[]        @relation("TicketsSent")
  assignedTickets Ticket[]        @relation("AssignedTickets")
  ticketComments  TicketComment[]

  ticketTraces                  TicketTrace[]
  destinationUserOnTicketTraces TicketTrace[] @relation("DestinationUserOnTicketTrace")
  originUserOnTicketTraces      TicketTrace[] @relation("OriginUserOnTicketTrace")

  assignedSupplies Supply[]
  supplyComments   SupplyComment[]

  supplyTraces                  SupplyTrace[]
  destinationUserOnSupplyTraces SupplyTrace[] @relation("DestinationUserOnSupplyTrace")
  originUserOnSupplyTraces      SupplyTrace[] @relation("OriginUserOnSupplyTrace")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ENABLED
  DISABLED
}

enum UserRole {
  // Studio
  STUDIO_USER

  // Hub
  HUB_USER

  // App
  APP_USER

  // Nobu
  NOBU_GUEST
  NOBU_USER
  NOBU_ADMIN
}

model UserGroup {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  members User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////
// Nobu Management //
/////////////////////

model Ticket {
  id       String  @id @default(uuid())
  issue    String
  solution String?

  status TicketStatus @default(UNASSIGNED)

  traces   TicketTrace[]
  comments TicketComment[]

  service   TicketService @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  serviceId String

  sentBy   User   @relation("TicketsSent", fields: [sentById], references: [id], onDelete: Restrict)
  sentById String

  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id], onDelete: Restrict)
  assignedToId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketStatus {
  UNASSIGNED
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

model TicketService {
  id   String @id @default(uuid())
  name String

  tickets Ticket[]

  category   TicketServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, categoryId])
}

model TicketServiceCategory {
  id   String @id @default(uuid())
  name String @unique

  services TicketService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketComment {
  id      String @id @default(uuid())
  content String

  writtenBy   User   @relation(fields: [writtenById], references: [id], onDelete: Restrict)
  writtenById String

  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketTrace {
  id   String          @id @default(uuid())
  type TicketTraceType

  origin   User?   @relation("OriginUserOnTicketTrace", fields: [originId], references: [id])
  originId String?

  destination   User?   @relation("DestinationUserOnTicketTrace", fields: [destinationId], references: [id])
  destinationId String?

  madeBy   User   @relation(fields: [madeById], references: [id], onDelete: Restrict)
  madeById String

  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Restrict)
  ticketId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketTraceType {
  RECEPTION
  ASSIGNMENT
  TRANSFER
  OPENED
  RESOLVED
  CLOSED
  CANCELLED
}

model Supply {
  id     String @id @default(uuid())
  brand  String
  model  String
  serial String @unique

  traces   SupplyTrace[]
  comments SupplyComment[]

  assignedTo   User?   @relation(fields: [assignedToId], references: [id], onDelete: Restrict)
  assignedToId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplyComment {
  id      String @id @default(uuid())
  content String

  writtenBy   User   @relation(fields: [writtenById], references: [id], onDelete: Restrict)
  writtenById String

  supply   Supply @relation(fields: [supplyId], references: [id], onDelete: Cascade)
  supplyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplyTrace {
  id   String          @id @default(uuid())
  type SupplyTraceType

  origin   User?   @relation("OriginUserOnSupplyTrace", fields: [originId], references: [id])
  originId String?

  destination   User?   @relation("DestinationUserOnSupplyTrace", fields: [destinationId], references: [id])
  destinationId String?

  madeBy   User   @relation(fields: [madeById], references: [id], onDelete: Restrict)
  madeById String

  supply   Supply @relation(fields: [supplyId], references: [id], onDelete: Restrict)
  supplyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SupplyTraceType {
  INPUT
  ASSIGNMENT
  TRANSFER
  UNASSIGNMENT
  REPAIR
  OUTPUT
}
