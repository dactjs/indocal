datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

///////////////////////////
// Api Tokens Management //
///////////////////////////

model ApiToken {
  id          String @id @default(uuid())
  name        String @unique
  description String

  token String @unique

  type   ApiTokenType
  status ApiTokenStatus @default(ENABLED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApiTokenType {
  ANON
  SERVICE
}

enum ApiTokenStatus {
  ENABLED
  DISABLED
}

//////////////////////
// Users Management //
//////////////////////

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  name     String
  password String

  status UserStatus @default(ENABLED)
  roles  UserRole[] @default([APP_USER])

  groups UserGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ENABLED
  DISABLED
}

enum UserRole {
  // Studio
  STUDIO_USER

  // Hub
  HUB_USER

  // App
  APP_USER

  // Nobu
  NOBU_GUEST
  NOBU_USER
  NOBU_ADMIN
}

model UserGroup {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  members User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/////////////////////
// Nobu Management //
/////////////////////

model Supply {
  id     String @id @default(uuid())
  brand  String
  model  String
  serial String @unique

  movements SupplyMovement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplyMovement {
  id String @id @default(uuid())

  supply   Supply @relation(fields: [supplyId], references: [id], onDelete: Restrict)
  supplyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
